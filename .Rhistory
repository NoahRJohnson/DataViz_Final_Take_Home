NISPUF10$XHIBTY8 <- factor(NISPUF10$XHIBTY8, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XHIBTY9 <- factor(NISPUF10$XHIBTY9, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY1 <- factor(NISPUF10$XMMRTY1, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY2 <- factor(NISPUF10$XMMRTY2, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY3 <- factor(NISPUF10$XMMRTY3, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY4 <- factor(NISPUF10$XMMRTY4, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY5 <- factor(NISPUF10$XMMRTY5, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY6 <- factor(NISPUF10$XMMRTY6, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY7 <- factor(NISPUF10$XMMRTY7, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY8 <- factor(NISPUF10$XMMRTY8, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XMMRTY9 <- factor(NISPUF10$XMMRTY9, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY1 <- factor(NISPUF10$XPCVTY1, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY2 <- factor(NISPUF10$XPCVTY2, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY3 <- factor(NISPUF10$XPCVTY3, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY4 <- factor(NISPUF10$XPCVTY4, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY5 <- factor(NISPUF10$XPCVTY5, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY6 <- factor(NISPUF10$XPCVTY6, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY7 <- factor(NISPUF10$XPCVTY7, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY8 <- factor(NISPUF10$XPCVTY8, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPCVTY9 <- factor(NISPUF10$XPCVTY9, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY1 <- factor(NISPUF10$XPOLTY1, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY2 <- factor(NISPUF10$XPOLTY2, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY3 <- factor(NISPUF10$XPOLTY3, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY4 <- factor(NISPUF10$XPOLTY4, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY5 <- factor(NISPUF10$XPOLTY5, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY6 <- factor(NISPUF10$XPOLTY6, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY7 <- factor(NISPUF10$XPOLTY7, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY8 <- factor(NISPUF10$XPOLTY8, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XPOLTY9 <- factor(NISPUF10$XPOLTY9, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY1 <- factor(NISPUF10$XROTTY1, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY2 <- factor(NISPUF10$XROTTY2, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY3 <- factor(NISPUF10$XROTTY3, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY4 <- factor(NISPUF10$XROTTY4, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY5 <- factor(NISPUF10$XROTTY5, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY6 <- factor(NISPUF10$XROTTY6, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY7 <- factor(NISPUF10$XROTTY7, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY8 <- factor(NISPUF10$XROTTY8, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XROTTY9 <- factor(NISPUF10$XROTTY9, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY1 <- factor(NISPUF10$XVRCTY1, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY2 <- factor(NISPUF10$XVRCTY2, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY3 <- factor(NISPUF10$XVRCTY3, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY4 <- factor(NISPUF10$XVRCTY4, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY5 <- factor(NISPUF10$XVRCTY5, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY6 <- factor(NISPUF10$XVRCTY6, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY7 <- factor(NISPUF10$XVRCTY7, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY8 <- factor(NISPUF10$XVRCTY8, levels=TYPElevels, labels=TYPElabels)
NISPUF10$XVRCTY9 <- factor(NISPUF10$XVRCTY9, levels=TYPElevels, labels=TYPElabels)
NISPUF10$HEP_BRTH <- factor(NISPUF10$HEP_BRTH, levels=HEPBRTlevels, labels=HEPBRTlabels)
NISPUF10$HEP_FLAG <- factor(NISPUF10$HEP_FLAG, levels=HEPFLGlevels, labels=HEPFLGlabels)
NISPUF10$P_U12VRC <- factor(NISPUF10$P_U12VRC, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTD331 <- factor(NISPUF10$P_UTD331, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTD431 <- factor(NISPUF10$P_UTD431, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDH1N_1 <- factor(NISPUF10$P_UTDH1N_1, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDH1N_2 <- factor(NISPUF10$P_UTDH1N_2, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDHEP <- factor(NISPUF10$P_UTDHEP, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDHEPA2 <- factor(NISPUF10$P_UTDHEPA2, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDHIB <- factor(NISPUF10$P_UTDHIB, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDHIB_ROUT_S <- factor(NISPUF10$P_UTDHIB_ROUT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDHIB_SHORT_S <- factor(NISPUF10$P_UTDHIB_SHORT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDMCV <- factor(NISPUF10$P_UTDMCV, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDMMX <- factor(NISPUF10$P_UTDMMX, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDPC3 <- factor(NISPUF10$P_UTDPC3, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDPCV <- factor(NISPUF10$P_UTDPCV, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDPOL <- factor(NISPUF10$P_UTDPOL, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDROT_S <- factor(NISPUF10$P_UTDROT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDTP3 <- factor(NISPUF10$P_UTDTP3, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTDTP4 <- factor(NISPUF10$P_UTDTP4, levels=UTDlevels, labels=UTDlabels)
NISPUF10$PU431331 <- factor(NISPUF10$PU431331, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTD431H31_ROUT_S <- factor(NISPUF10$P_UTD431H31_ROUT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$PU431_31 <- factor(NISPUF10$PU431_31, levels=UTDlevels, labels=UTDlabels)
NISPUF10$PU4313313 <- factor(NISPUF10$PU4313313, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTD431H313_ROUT_S <- factor(NISPUF10$P_UTD431H313_ROUT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$PU4313314 <- factor(NISPUF10$PU4313314, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTD431H314_ROUT_S <- factor(NISPUF10$P_UTD431H314_ROUT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$PU431_314 <- factor(NISPUF10$PU431_314, levels=UTDlevels, labels=UTDlabels)
NISPUF10$PUT43133 <- factor(NISPUF10$PUT43133, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTD431H3_ROUT_S <- factor(NISPUF10$P_UTD431H3_ROUT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$PUTD4313 <- factor(NISPUF10$PUTD4313, levels=UTDlevels, labels=UTDlabels)
NISPUF10$P_UTD431H_ROUT_S <- factor(NISPUF10$P_UTD431H_ROUT_S, levels=UTDlevels, labels=UTDlabels)
NISPUF10$CEN_REG <- factor(NISPUF10$CEN_REG, levels=CENREGlevels, labels=CENREGlabels)
NISPUF10$STATE <- factor(NISPUF10$STATE, levels=STATElevels, labels=STATElabels)
NISPUF10$P_UTDFL1 <- factor(NISPUF10$P_UTDFL1, levels=FLUUTDlevels, labels=FLUUTDlabels)
NISPUF10$P_UTDFL2 <- factor(NISPUF10$P_UTDFL2, levels=FLUUTDlevels, labels=FLUUTDlabels)
NISPUF10$P_UTDFL3 <- factor(NISPUF10$P_UTDFL3, levels=FLUUTDlevels, labels=FLUUTDlabels)
NISPUF10$RACE_K <- factor(NISPUF10$RACE_K, levels=RACE_PUFlevels, labels=RACE_PUFlabels)
NISPUF10$AGECPOXR <- factor(NISPUF10$AGECPOXR, levels=AGECPOXRlevels, labels=AGECPOXRlabels)
NISPUF10$C1R <- factor(NISPUF10$C1R, levels=C1Rlevels, labels=C1Rlabels)
NISPUF10$C5R <- factor(NISPUF10$C5R, levels=C5Rlevels, labels=C5Rlabels)
NISPUF10$INCQ298A <- factor(NISPUF10$INCQ298A, levels=INCQ298Alevels, labels=INCQ298Alabels)
NISPUF10$RACEETHK <- factor(NISPUF10$RACEETHK, levels=RACEETHKlevels, labels=RACEETHKlabels)
NISPUF10$D6R <- factor(NISPUF10$D6R, levels=D6Rlevels, labels=D6Rlabels)
NISPUF10$N_PRVR <- factor(NISPUF10$N_PRVR, levels=D6Rlevels, labels=D6Rlabels)
NISPUF10$FRSTBRN <- factor(NISPUF10$FRSTBRN, levels=FRSTBRNlevels, labels=FRSTBRNlabels)
NISPUF10$SEQNUMC <- factor(NISPUF10$SEQNUMC, levels=CHARIDlevels, labels=CHARIDlabels)
NISPUF10$SEQNUMHH <- factor(NISPUF10$SEQNUMHH, levels=CHARIDlevels, labels=CHARIDlabels)
NISPUF10$BF_FORMR08 <- factor(NISPUF10$BF_FORMR08, levels=BFFORM08Flevels, labels=BFFORM08Flabels)
NISPUF10$RENT_OWN <- factor(NISPUF10$RENT_OWN, levels=RENTOWNlevels, labels=RENTOWNlabels)
NISPUF10$NUM_PHONE <- factor(NISPUF10$NUM_PHONE, levels=NUM_PHONlevels, labels=NUM_PHONlabels)
NISPUF10$NUM_CELLS_HH <- factor(NISPUF10$NUM_CELLS_HH, levels=NUM_PHONlevels, labels=NUM_PHONlabels)
NISPUF10$NUM_CELLS_PARENTS <- factor(NISPUF10$NUM_CELLS_PARENTS, levels=NUM_PHONlevels, labels=NUM_PHONlabels)
NISPUF10$VFC_I <- factor(NISPUF10$VFC_I, levels=INS_STATlevels, labels=INS_STATlabels)
NISPUF10$MARITAL2 <- factor(NISPUF10$MARITAL2, levels=MAR_PUF2_levels, labels=MAR_PUF2_labels)
NISPUF10$ESTIAP10 <- factor(NISPUF10$ESTIAP10, levels=ESTIAP10Flevels, labels=ESTIAP10Flabels)
NISPUF10$P_UTDPCVB13 <- factor(NISPUF10$P_UTDPCVB13, levels=UTDPCVBlevels, labels=UTDPCVBlabels)
##########################################################################
# STEP 7:   CONTENTS AND STATISTICAL ESTIMATES(FREQUENCY) EXAMPLE        #
##########################################################################
#---CONTENTS---#
NISPUF10.CONTENTS <- contents(NISPUF10)$contents
print(NISPUF10.CONTENTS)
#IN CASE THAT THE R CONSOLE CANNOT DISPLAY WHOLE CONTENTS,
#YOU CAN SAVE CONTENTS INTO A FILE
#write.table(NISPUF10.CONTENTS, file=paste(PUF,"/file-name",sep=""))
#---UNWEIGHTED FREQUENCY---#
unwt_freq <- function(UNWT.VAR){#FUNCTION TO PRINT UNWEIGHTED FREQUENCIES
unwt.tab <- wtd.table(UNWT.VAR, weights= NULL, type='table')
unwtd.freq <- data.frame(cbind(
unwt.tab, round(unwt.tab/sum(unwt.tab)*100,2),
cumsum(unwt.tab), cumsum(round(unwt.tab/sum(unwt.tab)*100,2))))
names(unwtd.freq) <- c("Frequency", "Percent", "Cumulative Frequency", "Cumulative Percent")
unwtd.title <- paste('2010 NIS', 'UNWEIGHTED FREQUENCIES', label(UNWT.VAR), sep="\n")
label(unwtd.freq) <- unwtd.title
print(unwtd.freq)
}
UNWT.VAR <- NISPUF10$AGEGRP	#INPUT A VARIABLE OF INTEREST
unwt_freq(UNWT.VAR)
#---WEIGHTED FREQUENCY---#
WT <- NISPUF10$RDDWT		#INPUT A WEIGHT VARIABLE
WT.VAR <- NISPUF10$AGEGRP 	#INPUT A VARIABLE OF INTEREST
wt.tab <- wtd.table(WT.VAR, weights= WT, type='table')
wtd.freq <- data.frame(cbind(
wt.tab, round(wt.tab/sum(wt.tab)*100,2),
cumsum(wt.tab), cumsum(round(wt.tab/sum(wt.tab)*100,2))))
names(wtd.freq) <- c("Frequency", "Percent", "Cumulative Frequency", "Cumulative Percent")
wtd.title <- paste('2010 NIS PUBLIC USE FILE', 'WEIGHTED FREQUENCIES (EXCLUDING U.S. VIRGIN ISLANDS)', label(WT.VAR), sep="\n")
label(wtd.freq) <- wtd.title
print(wtd.freq)
str(NISPUF10)
str(NISPUF10.CONTENTS)
unique(NISPUF10$YEAR)
str(NISPUF10$YEAR)
str(NISPUF10)
print(wtd.freq)
str(NISPUF10$AGEGRP)
str(NISPUF10$RDDWT)
unwt_freq(UNWT.VAR)
install_load('dslabs')
str(us_contagious_diseases)
unique(us_contagious_diseases$disease)
str(NISPUF10$P_NUMMMR)
min(us_contagious_diseases$year)
max(us_contagious_diseases$year)
unique(us_contagious_diseases$year)
order(unique(us_contagious_diseases$year))
arrange(unique(us_contagious_diseases$year))
sort(unique(us_contagious_diseases$year))
1928:2011
len(1928:2011)
length(1928:2011)
length(unique(us_contagious_diseases$year))
install_load('readxl')
?read_excel
library(install.load)
#install_load('')
install_load('readxl')
read_excel('data/DTaP.xls')
?read_excel
tmp <- read_excel('data/MMR.xls')
tmp <- read_xls('data/MMR.xls')
tmp <- read_xlsx('data/MMR.xls')
getwd()
tmp <- read_xlsx('/home/noah/git/dataViz/Final_Take_Home/data/MMR.xls')
tmp <- read_excel('/home/noah/git/dataViz/Final_Take_Home/data/MMR.xlsx')
library(install.load)
#install_load('')
install_load('readxl')
MMR <- read_excel('data/MMR.xlsx')
str(MMR)
MMR <- read_excel('data/MMR.xlsx', skip=2)
str(MMR)
names(MMR
)
str(MMR)
MMR <- read_excel('data/MMR.xlsx', skip=2)
MMR <- MMR[, 1:151] # extract data just for 19-35 month age group
str(MMR)
MMR[,"2009"]
toString(1995:2016)
1995:2016
as.character(1995:2016)
MMR <- MMR[, columns_of_interest]
columns_of_interest <- as.character(1995:2016)
MMR <- MMR[, columns_of_interest]
str(MMR)
x <- MMR
MMR <- read_excel('data/MMR.xlsx', skip=2)
columns_of_interest <- as.character(1995:2016)
MMR <- MMR[, columns_of_interest]
x == MMR
any(x != MMR)
all.equal(x, MMR)
HepA <- read_excel('data/HepA.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- as.character(2000:2016)
HepA <- HepA[, columns_of_interest]
str(HepA)
MMR <- read_excel('data/MMR.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(1995:2016))
MMR <- MMR[, columns_of_interest]
str(MMR)
HepA <- read_excel('data/HepA.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(2000:2016))
HepA <- HepA[, columns_of_interest]
str(HepA)
head(MMR)
MMR[, c(-1)]
?as.numeric
as.numeric(MMR[, c(-1)])
?funs
install_load('tidyverse')
?mutate_each
?funs
funs(as.numeric(.))
MMR[, c(-1)] %<>%
mutate_all(funs(as.numeric(.)))
MMR[, c(-1)] %>%
mutate_all(funs(as.numeric(.)))
MMR[, c(-1)]
MMR[, c(-1)] %>% mutate_all(as.numeric(.))
MMR[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
?funs
head(MMR)
MMR <- read_excel('data/MMR.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(1995:2016))
MMR <- MMR[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
MMR[, c(-1)] <- MMR[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
###
### Clean Hepatitis A vaccine data
###
HepA <- read_excel('data/HepA.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(2000:2016))
HepA <- HepA[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
HepA[, c(-1)] <- HepA[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
str(MMR)
?as_tibble
?as.tibble
x <- as_tibble(MMR)
str(x)
str(x$Names)
str(x$'2009')
str(x$'2016')
x <- as.data.frame(MMR)
str(x)
?save
# Write out new cleaned data frame
save(file="data/MMR")
# Write out new cleaned data frame
save(MMR, file="data/MMR")
# Write out new cleaned data frame
save(MMR, file="data/MMR.Rda")
DTaP <- read_excel('data/DTaP.xlsx', skip=2)
# This data file is slightly different from the others.
# The data for percent populations with
# >=1 DTaP Vaccination in the 19-35 month age group
# is not the first block of columns, so I've gone through
# and found the appropriate indices by hand with LibreOffice.
columns_of_interest <- c("Names", 254:(254 + 150 - 1))
DTaP <- DTaP[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
DTaP[, c(-1)] <- DTaP[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
DTaP <- read_excel('data/DTaP.xlsx', skip=2)
# This data file is slightly different from the others.
# The data for percent populations with
# >=1 DTaP Vaccination in the 19-35 month age group
# is not the first block of columns, so I've gone through
# and found the appropriate indices by hand with LibreOffice.
columns_of_interest <- c("Names", 254:(254 + 150 - 1))
columns_of_interest
# This data file is slightly different from the others.
# The data for percent populations with
# >=1 DTaP Vaccination in the 19-35 month age group
# is not the first block of columns, so I've gone through
# and found the appropriate indices by hand with LibreOffice.
columns_of_interest <- 254:(254 + 150 - 1)
columns_of_interest
columns_of_interest <- c("Names", columns_of_interest)
columns_of_interest
DTaP <- read_excel('data/DTaP.xlsx', skip=2)
str(DTaP)
DTaP[, 0]
DTaP[, 1]
###
DTaP <- read_excel('data/DTaP.xlsx', skip=2)
# This data file is slightly different from the others.
# The data for percent populations with
# >=1 DTaP Vaccination in the 19-35 month age group
# is not the first block of columns, so I've gone through
# and found the appropriate indices by hand with LibreOffice.
columns_of_interest <- 254:(254 + 150 - 1)
columns_of_interest <- c(1, columns_of_interest)  # 1 is the "Names" column
DTaP <- DTaP[, columns_of_interest]
str(DTaP)
names(DTaP)
paste(as.character(1995:2016), "__2", sep="")
paste(as.character(1995:2016), "__2")
# This data file is slightly different from the others.
# The data for percent populations with
# >=1 DTaP Vaccination in the 19-35 month age group
# is not the first block of columns, it's the third,
# so we have to add the __2 suffix since
# R - by default - adds numbers to identical column names.
columns_of_interest <- c("Names", paste(as.character(1995:2016), "__2", sep=""))
columns_of_interest
DTaP <- DTaP[, columns_of_interest]
DTaP <- read_excel('data/DTaP.xlsx', skip=2)
# This data file is slightly different from the others.
# The data for percent populations with
# >=1 DTaP Vaccination in the 19-35 month age group
# is not the first block of columns, it's the third,
# so we have to add the __2 suffix since
# R - by default - adds numbers to identical column names.
columns_of_interest <- c("Names", paste(as.character(1995:2016), "__2", sep=""))
DTaP <- DTaP[, columns_of_interest]
DTaP
DTaP[, c(-1)] <- DTaP[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
# Simplify
DTaP <- as.data.frame(DTaP)
DTaP
state_names <- c("Alabama", "Alaska", "Arizona", "Arkansas",
"California", "Colorado", "Connecticut",
"Delaware", "Florida", "Georgia",
"Hawaii", "Idaho", "Illinois", "Indiana",
"Iowa", "Kansas", "Kentucky", "Louisiana",
"Maine", "Maryland", "Massachusetts",
"Michigan", "Minnesota", "Mississippi",
"Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey",
"New Mexico", "New York", "North Carolina",
"North Dakota", "Ohio", "Oklahoma",
"Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee",
"Texas", "Utah", "Vermont", "Virginia",
"Washington", "West Virginia", "Wisconsin",
"Wyoming")
nrow(MMR)
MMR
MMR$Names
knitr::opts_chunk$set(echo = TRUE)
library(install.load)
install_load('dslabs')
install_load('tidyverse')
str(us_contagious_diseases)
levels(us_contagious_diseases$state)
MMR$Names
state_names <- c("Alabama", "Alaska", "Arizona", "Arkansas",
"California", "Colorado", "Connecticut",
"Delaware", "District of Columbia", "Florida",
"Georgia", "Hawaii", "Idaho", "Illinois",
"Indiana", "Iowa", "Kansas", "Kentucky",
"Louisiana", "Maine", "Maryland",
"Massachusetts", "Michigan", "Minnesota",
"Mississippi", "Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey",
"New Mexico", "New York", "North Carolina",
"North Dakota", "Ohio", "Oklahoma",
"Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee",
"Texas", "Utah", "Vermont", "Virginia",
"Washington", "West Virginia", "Wisconsin",
"Wyoming")
MMR <- read_excel('data/MMR.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(1995:2016))
MMR <- MMR[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
MMR[, c(-1)] <- MMR[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
MMR <- MMR %>% filter(Names %in% state_names)
MMR
MMR <- MMR %>% filter(Names %in% state_names) %>% rename(State = Names)
MMR
us_contagious_diseases$state
MMR <- read_excel('data/MMR.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(1995:2016))
MMR <- MMR[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
MMR[, c(-1)] <- MMR[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
MMR <- MMR %>% filter(Names %in% state_names) %>% rename(state = Names)
# Simplify
MMR <- as.data.frame(MMR)
MMR
MMR <- read_excel('data/MMR.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(1995:2016))
MMR <- MMR[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
MMR[, c(-1)] <- MMR[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
MMR <- MMR %>% filter(Names %in% state_names) %>% rename(state = Names)
# Simplify
MMR <- as.data.frame(MMR)
# Write out new cleaned data frame
save(MMR, file="data/MMR.Rda")
library(install.load)
install_load('readxl')
install_load('tidyverse')
state_names <- c("Alabama", "Alaska", "Arizona", "Arkansas",
"California", "Colorado", "Connecticut",
"Delaware", "District of Columbia", "Florida",
"Georgia", "Hawaii", "Idaho", "Illinois",
"Indiana", "Iowa", "Kansas", "Kentucky",
"Louisiana", "Maine", "Maryland",
"Massachusetts", "Michigan", "Minnesota",
"Mississippi", "Missouri", "Montana", "Nebraska",
"Nevada", "New Hampshire", "New Jersey",
"New Mexico", "New York", "North Carolina",
"North Dakota", "Ohio", "Oklahoma",
"Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee",
"Texas", "Utah", "Vermont", "Virginia",
"Washington", "West Virginia", "Wisconsin",
"Wyoming")
###
### Clean MMR vaccine data
###
MMR <- read_excel('data/MMR.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 MMR Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(1995:2016))
MMR <- MMR[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
MMR[, c(-1)] <- MMR[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
MMR <- MMR %>% filter(Names %in% state_names) %>% rename(state = Names)
# Simplify
MMR <- as.data.frame(MMR)
# Write out new cleaned data frame
save(MMR, file="data/MMR.Rda")
###
### Clean Hepatitis A vaccine data
###
HepA <- read_excel('data/HepA.xlsx', skip=2)
# We just want to extract data of percent populations with
# >=1 Hepatitis A Vaccination for the 19-35 month age group
columns_of_interest <- c("Names", as.character(2000:2016))
HepA <- HepA[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
HepA[, c(-1)] <- HepA[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
HepA <- HepA %>% filter(Names %in% state_names) %>% rename(state = Names)
# Simplify
HepA <- as.data.frame(HepA)
# Write out new cleaned data frame
save(HepA, file="data/HepA.Rda")
###
### Clean DTaP A vaccine data
###
DTaP <- read_excel('data/DTaP.xlsx', skip=2)
# This data file is slightly different from the others.
# The data for percent populations with
# >=1 DTaP Vaccination in the 19-35 month age group
# is not the first block of columns, it's the third,
# so we have to add the __2 suffix since
# R - by default - adds numbers to identical column names.
columns_of_interest <- c("Names", paste(as.character(1995:2016), "__2", sep=""))
#columns_of_interest <- 254:(254 + 150 - 1)
#columns_of_interest <- c(1, columns_of_interest)  # 1 is the "Names" column
DTaP <- DTaP[, columns_of_interest]
# Convert character vectors to numerics, but not the "Names" column
DTaP[, c(-1)] <- DTaP[, c(-1)] %>% mutate_all(funs(as.numeric(.)))
DTaP <- DTaP %>% filter(Names %in% state_names)
# Simplify
DTaP <- as.data.frame(DTaP)
colnames(DTaP) <- c("state", as.character(1995:2016))
# Write out new cleaned data frame
save(DTaP, file="data/DTaP.Rda")
knitr::opts_chunk$set(echo = TRUE)
library(install.load)
install_load('dslabs')
install_load('tidyverse')
MMR
MMR <-load("data/MMR.Rda")
HepA <-load("data/HepA.Rda")
DTaP <- load("data/DTaP.Rda")
MMR
?load
MMR <-load(file="data/MMR.Rda")
MMR
load(file="data/MMR.Rda")
load(file="data/HepA.Rda")
load(file="data/DTaP.Rda")
str(MMR)
str(HepA)
str(DTaP)
head(MMR)
load(file="data/MMR.Rda")
load(file="data/HepA.Rda")
load(file="data/DTaP.Rda")
head(MMR)
head(HepA)
head(DTaP)
